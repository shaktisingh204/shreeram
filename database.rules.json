
{
  "rules": {
    "users_metadata": {
      ".read": "auth != null",
      "$uid": {
        // Allow user to read their own metadata
        // Allow superadmin to read/write any user's metadata
        ".read": "$uid === auth.uid || root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin'",
        ".write": "root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin'",
        ".validate": "newData.hasChildren(['id', 'email', 'role']) && newData.child('id').isString() && newData.child('email').isString() && newData.child('role').val() === 'manager' || newData.child('role').val() === 'superadmin'"
      }
    },
    "libraries_metadata": {
      ".read": "auth != null",
      // Only superadmin can write to library metadata
      ".write": "auth != null && root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin'",
      "$libraryMetaId": {
        ".validate": "newData.hasChildren(['id', 'name', 'createdAt']) && newData.child('id').isString() && newData.child('name').isString() && newData.child('createdAt').isString()"
      },
      ".indexOn": ["createdAt"]
    },
    "libraries": {
      "$libraryId": {
        // Superadmin can read/write any library's data
        // Manager can read/write their assigned library's data
        ".read": "auth != null && (root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin' || (root.child('users_metadata').child(auth.uid).child('role').val() === 'manager' && root.child('users_metadata').child(auth.uid).child('assignedLibraryId').val() === $libraryId))",
        ".write": "auth != null && (root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin' || (root.child('users_metadata').child(auth.uid).child('role').val() === 'manager' && root.child('users_metadata').child(auth.uid).child('assignedLibraryId').val() === $libraryId))",
        "students": {
           ".indexOn": ["status", "fullName"]
          // Example validation for student data:
          // "$studentId": {
          //   ".validate": "newData.hasChildren(['fullName', 'contactDetails', 'status', 'feesDue', 'enrollmentDate']) && newData.child('fullName').isString() && newData.child('contactDetails').isString() && newData.child('status').isString() && newData.child('feesDue').isNumber() && newData.child('enrollmentDate').isString() && (!newData.hasChild('mobileNumber') || newData.child('mobileNumber').isString()) && (!newData.hasChild('fatherName') || newData.child('fatherName').isString()) && (!newData.hasChild('address') || newData.child('address').isString()) && (!newData.hasChild('photoUrl') || newData.child('photoUrl').isString()) && (!newData.hasChild('idProofUrl') || newData.child('idProofUrl').isString()) && (!newData.hasChild('notes') || newData.child('notes').isString()) && (!newData.hasChild('seatId') || newData.child('seatId').isString()) && (!newData.hasChild('paymentTypeId') || newData.child('paymentTypeId').isString())"
          // }
        },
        "seats": {
          ".indexOn": ["floor", "seatNumber"]
          // Example validation for seat data:
          // "$seatId": {
          //   ".validate": "newData.hasChildren(['seatNumber', 'floor', 'isOccupied']) && newData.child('seatNumber').isString() && newData.child('floor').isString() && newData.child('isOccupied').isBoolean() && (!newData.hasChild('studentId') || newData.child('studentId').isString()) && (!newData.hasChild('studentName') || newData.child('studentName').isString())"
          // }
        },
        "paymentTypes": {
          // Example validation for payment type data:
          // "$paymentTypeId": {
          //   ".validate": "newData.hasChildren(['name', 'amount', 'frequency']) && newData.child('name').isString() && newData.child('amount').isNumber() && newData.child('frequency').isString()"
          // }
        },
        "payments": {
          // Example validation for payment data:
          // "$paymentId": {
          //   ".validate": "newData.hasChildren(['studentId', 'amount', 'paymentDate']) && newData.child('studentId').isString() && newData.child('amount').isNumber() && newData.child('paymentDate').isString() && (!newData.hasChild('studentName') || newData.child('studentName').isString()) && (!newData.hasChild('notes') || newData.child('notes').isString())"
          // }
        }
      }
    },
    "config": { // Config node is less critical for data segregation but keep it restricted
      "adminPassword": {
        // This path is no longer used for primary auth, but if kept for other configs, restrict access
        ".read": "auth != null && root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin'",
        ".write": "auth != null && root.child('users_metadata').child(auth.uid).child('role').val() === 'superadmin'"
      }
    }
  }
}
